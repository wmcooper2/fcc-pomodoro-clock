{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["accurateInterval","require","BoxControls","props","this","className","onClick","onLeftBtn","leftBtnID","id","leftBtnText","lengthID","value","onRightBtn","rightBtnID","rightBtnText","React","Component","TimerBox","labelID","label","Pomodoro","state","breakLength","sessionLength","buttonState","clockTime","clockCount","clockID","clockState","isRunning","isAlarming","handleLeftBtn","bind","handleRightBtn","handleReset","formatClockTime","clockInit","handlePlayPause","countDown","setState","clear","audioRef","pause","currentTime","currentState","newClockState","oldClockCount","newClockCount","newClockTime","switchedClockCount","play","change","newSessionLength","minutes","Math","floor","seconds","preload","ref","input","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1bc360d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet accurateInterval = require('accurate-interval');\n\nclass BoxControls extends React.Component{\n  render(){\n    const { props } = {...this.props};\n    return(\n      <div className=\"controls\">\n        <button \n          onClick={() =>{props.onLeftBtn(props.leftBtnID)}}\n          id={props.leftBtnID}\n          >\n          {props.leftBtnText}\n        </button>\n        <span className=\"title\" id={props.lengthID}>\n          {props.value}\n        </span>\n        <button \n          onClick={()=>{props.onRightBtn(props.rightBtnID)}}\n          id={props.rightBtnID}\n          >\n          {props.rightBtnText}\n        </button>\n      </div>\n    );\n  }\n}\n\n\nclass TimerBox extends React.Component{\n  render(){\n    return(\n      <div className=\"timerbox\">\n        <span className=\"title\" id={this.props.labelID}>{this.props.label}</span>\n        <BoxControls props={this.props} />\n      </div>\n    );\n  }\n}\n\n\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.audioRef = React.createRef();\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      buttonState: \"play\",\n      clockTime: \"25:00\",\n      clockCount: 1500,\n      clockID: null,\n      clockState: \"Session\",\n      isRunning: false,\n      isAlarming: false,\n    };\n    this.handleLeftBtn = this.handleLeftBtn.bind(this);\n    this.handleRightBtn = this.handleRightBtn.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.formatClockTime = this.formatClockTime.bind(this);\n    this.clockInit = this.clockInit.bind(this);\n    this.handlePlayPause = this.handlePlayPause.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  handleLeftBtn(props){\n    if (props ===\"break-decrement\" && !this.state.isRunning){\n      if (this.state.breakLength > 1){\n        this.setState({\n          breakLength: this.state.breakLength - 1,\n        });\n      }\n    } else if (props === \"session-decrement\" && !this.state.isRunning){\n      if (this.state.sessionLength > 1){\n        this.clockInit(-1)\n      }\n    }\n  }\n\n  handleRightBtn(props){\n    if (props ===\"break-increment\" && !this.state.isRunning){\n      if (this.state.breakLength < 60){\n        this.setState({\n          breakLength: this.state.breakLength + 1,\n        });\n      }\n    } else if (props === \"session-increment\" && !this.state.isRunning){\n      if (this.state.sessionLength < 60){\n        this.clockInit(1)\n      }\n    }\n  }\n\n  handlePlayPause(props){\n    if (this.state.buttonState === \"play\") {\n      //user wants to \"play\"\n      this.setState(() => {\n        return {\n          buttonState: \"pause\",\n          isRunning: true,\n          clockID: accurateInterval(() => {this.countDown()}, 1000)\n        };\n      });\n    } else {\n      //user wants to \"pause\"\n      this.setState(() => {\n        return { \n          buttonState: \"play\",\n          isRunning: false \n        };\n      });\n      this.state.clockID.clear();\n    }\n  }\n\n  handleReset(props){\n    if (this.state.isRunning) {\n      this.state.clockID.clear();\n      this.setState({\n        isRunning: false,\n      });\n    }\n\n    //silence alarm and rewind\n    this.audioRef.pause();\n    this.audioRef.currentTime = 0;\n\n    this.setState(() => {\n      return {\n        breakLength: 5,\n        sessionLength: 25,\n        buttonState: \"play\",\n        clockTime: \"25:00\",\n        clockCount: 1500,\n        clockID: null,\n        clockState: \"Session\",\n        isRunning: false,\n        isAlarming: false,\n      };\n    });\n  }\n\n  countDown() {\n    let currentState = this.state.clockState;\n    let newClockState = this.state.clockState;\n    let oldClockCount = this.state.clockCount;\n\n    if (this.state.clockCount > 0){                   //clock is > 0\n      let newClockCount = oldClockCount - 1;             //reduce count by 1\n      let newClockTime = this.formatClockTime(newClockCount);\n      this.setState({\n        clockTime: newClockTime,\n        clockCount: newClockCount,\n      });\n     \n    } else {                                          //clock time reached 0, sound alarm\n      let switchedClockCount = 0;\n  \n      //sound the alarm\n      this.audioRef.play();\n      //end the audioRef\n      //setTimeout(() => this.audio.pause(), 1100);\n\n      if (currentState === \"Session\") {                   //switch to break\n        newClockState = \"Break\";\n        switchedClockCount = this.state.breakLength * 60;\n      } else if (currentState === \"Break\") {               //switch to session\n        newClockState = \"Session\";\n        switchedClockCount = this.state.sessionLength * 60;\n      }\n      let newClockTime = this.formatClockTime(switchedClockCount);\n      this.setState({\n        clockTime: newClockTime,\n        clockCount: switchedClockCount,\n        clockState: newClockState\n      });\n    }\n  }\n\n  clockInit(change){\n    let newSessionLength = this.state.sessionLength + change;\n    let newClockCount = newSessionLength * 60;\n    let newClockTime = this.formatClockTime(newClockCount);\n    this.setState({\n      sessionLength: newSessionLength,\n      clockCount: newClockCount,\n      clockTime: newClockTime,\n    });\n  }\n\n  formatClockTime(clockCount) {\n    let minutes = Math.floor(clockCount / 60);\n    let seconds = clockCount % 60;\n    if (clockCount === 0) {\n      return \"00:00\";\n    } else {\n      if (seconds < 10) {\n        seconds = \"0\" + seconds;\n      }\n      if (minutes < 10) {\n        minutes = \"0\" + minutes;\n      }\n      return minutes + \":\" + seconds;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wholeclock\">\n        <TimerBox \n          label=\"Break Length\"\n          labelID=\"break-label\"\n          leftBtnText=\"down\"\n          leftBtnID=\"break-decrement\"\n          onLeftBtn={this.handleLeftBtn}\n          lengthID=\"break-length\"\n          value={this.state.breakLength}\n          rightBtnText=\"up\"\n          rightBtnID=\"break-increment\"\n          onRightBtn={this.handleRightBtn}\n        />\n\n        <TimerBox \n          label={this.state.clockState}\n          labelID=\"timer-label\"\n          leftBtnText={this.state.buttonState}\n          leftBtnID=\"start_stop\"\n          onLeftBtn={this.handlePlayPause}\n          lengthID=\"time-left\"\n          value={this.state.clockTime}\n          rightBtnText=\"reset\"\n          rightBtnID=\"reset\"\n          onRightBtn={this.handleReset}\n        />\n\n        <TimerBox \n          label=\"Session Length\"\n          labelID=\"session-label\"\n          leftBtnText=\"down\"\n          leftBtnID=\"session-decrement\"\n          onLeftBtn={this.handleLeftBtn}\n          lengthID=\"session-length\"\n          value={this.state.sessionLength}\n          rightBtnText=\"up\"\n          rightBtnID=\"session-increment\"\n          onRightBtn={this.handleRightBtn}\n        />\n        <audio\n          preload=\"auto\"\n          ref={(input) => {this.audioRef = input}}\n          src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1872357/dancingSpearGuy.wav\"\n          id=\"beep\"\n        />\n      </div>\n    );\n  }\n}\n\n//audio tag was a pain in the butt. Read this; \n//https://stackoverflow.com/questions/48748063/react-refs-audio-playback-unhandled-rejection-notsupportederror-on-ios\n//and this;\n//https://reactjs.org/docs/refs-and-the-dom.html\n\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Pomodoro from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Pomodoro />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}